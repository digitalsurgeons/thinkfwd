# This file declares configuration variables for Gitlab CI and then includes our centralized GIT

variables:
  # Use these to define user@ip details for each destination server.
  # This way you wont have to worry about making changes in multiple
  # places

  # Change this to digitalsurgeonsdev.com if you need to
  STG_DOMAIN: https://staging.thinkfwd.co
  PRD_DOMAIN: https://www.thinkfwd.co

  NODE_VERSION: 10

  # Build Variables
  DEVELOP: "false"
  FEATURE: "false"
  STAGING: "true"
  PRODUCTION: "true"
  # Had to use 'RUN_COMPOSER' instead of 'COMPOSER' because composer looks for a config file at it's own ENV var
  RUN_COMPOSER: "false"
  FRONTEND: "true"
  TEST: "false"
  CLOUDFLARE: "false"
  # $CLOUDFLARE_ZONE_ID
  # $CLOUDFLARE_EMAIL
  # $CLOUDFLARE_API_KEY

.deploy:
  image: sebble/deploy
  before_script:
    # Set up the .ssh directory
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    # Adds host keys for all deployed environments, so we know when something goes wrong
    - echo -n "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 0600 ~/.ssh/known_hosts
    # Adds private key so we can connect to destination server
    - echo -n "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 0600 ~/.ssh/id_ed25519
    # Export the environment url, which only exists in the child jobs,
    # so that we can set cypress' base url in the test phase
    - echo -n "$CI_ENVIRONMENT_URL" > cypress_env
  artifacts:
    paths:
      - cypress_env
  stage: deploy

deploy_prod:
  extends: .deploy
  script:
    - echo "$PRD_DOTENV" > .env
    - rm public/static/robots.txt
    - rsync --copy-unsafe-links -rvzcSl --exclude-from '.rsyncignore' ./ $SERVER_DETAILS_PRD:$SERVER_PATH_PRD/
    - >
      ssh $SERVER_DETAILS_PRD 'export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"; cd $SERVER_PATH_PRD; next build; pm2 restart thinkfwd'
  environment:
    name: production
    url: $PRD_DOMAIN
  when: manual
  only:
    refs:
      - master
    variables:
      - $PRODUCTION == "true"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-prod-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

deploy_stage:
  extends: .deploy
  script:
    - echo "$STG_DOTENV" > .env
    - rm public/static/robots.txt
    - mv public/static/robots.stage.txt public/static/robots.txt
    - rsync --copy-unsafe-links -rvzcSl --exclude-from '.rsyncignore' ./ $SERVER_DETAILS_STG:$SERVER_PATH_STG/
    - >
      ssh $SERVER_DETAILS_STG 'export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"; cd $SERVER_PATH_STG; next build; pm2 restart thinkfwd-stage'
  environment:
    name: staging
    url: $STG_DOMAIN
  only:
    refs:
      # Deploy from hotfix and release branches as well as master, so we
      # can test and make modifications on those branches before finishing
      # out a branch. This leads to fewer version bumps and less repo
      # noise.
      - /^(master|hotfix\/|release\/)/
    variables:
      - $STAGING == "true"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-stg-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

# Build steps for boilerplate frontend
build_frontend:
  image: node:$NODE_VERSION
  script:
    # Update npm to ensure ci command present
    # TODO: This will eventually cause failures if and when npm itself
    # can no longer run on an earlier version of node. As of the time
    # this change was introduced, the latest npm works all the way back
    # to node 6, so we're going to chance it until npm introduces some
    # breaking change.
    - npm -g i npm
    # Install dependencies
    - npm ci
  cache:
    key: npm
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/
    expire_in: 2 mos
  stage: build
  only:
    refs:
      - /^(master|hotfix\/|release\/)/
    variables:
      - $FRONTEND == "true"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-frontend-build/
      - $CI_COMMIT_MESSAGE =~ /skip-build/